<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>循环c</title>
      <link href="/blog/2023/11/05/c/"/>
      <url>/blog/2023/11/05/c/</url>
      
        <content type="html"><![CDATA[<p>#define _CRT_SECURE_NO_WARNINGS 1<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>typedef int ElenemtType;&#x2F;&#x2F;重命名<br>typedef struct node* CycleList;<br>typedef CycleList List;<br>struct node {<br>    List next;&#x2F;&#x2F;指向下一个结点的指针<br>    ElenemtType data;&#x2F;&#x2F;储存序号<br>};<br>List CreatList();&#x2F;&#x2F;创建头节点<br>List insert(List L, int Len);&#x2F;&#x2F;插入结点，采用尾插法，传入链表和序号<br>List  Search(List L, int N, int M);&#x2F;&#x2F;遍历，删除和新建循环链表，传入链表，报数和人数<br>int main()<br>{<br>    List L &#x3D; CreatList();<br>    int M, N;&#x2F;&#x2F;M接收人数，N接收报数<br>    int Len &#x3D; 0;&#x2F;&#x2F;序号<br>    scanf(“%d”, &amp;M);<br>    while (Len &lt; M)&#x2F;&#x2F;Len等于M时结束<br>    {<br>        Len++;<br>        insert(L, Len);&#x2F;&#x2F;插入<br>    }<br>    while (scanf(“%d”, &amp;N)&#x3D;&#x3D;1)&#x2F;&#x2F;循环结束条件，判断N是否为int型变量（PTA里能用，vs用不了）<br>    {<br>        L &#x3D; Search(L, N, M);&#x2F;&#x2F;开始遍历和删除，L接收新链表<br>    }<br>    List P &#x3D; L-&gt;next;<br>    while (P !&#x3D; L)<br>    {<br>        printf(“%4d”, P-&gt;data);<br>        P &#x3D; P-&gt;next;<br>    }<br>    return 0;<br>}<br>List CreatList()<br>{<br>    List Head &#x3D; malloc(sizeof(struct node));<br>    Head-&gt;next &#x3D; Head;&#x2F;&#x2F;循环单链表头结点指向自己<br>    return Head;&#x2F;&#x2F;返回头结点<br>}<br>List insert(List L, int Len)<br>{<br>    if (L-&gt;next &#x3D;&#x3D; L)&#x2F;&#x2F;如果只有头节点先插入一个结点<br>    {<br>        List t &#x3D; malloc(sizeof(struct node));<br>        t-&gt;data &#x3D; Len;&#x2F;&#x2F;传入序号<br>        t-&gt;next &#x3D; L;&#x2F;&#x2F;新建结点的next指向头结点<br>        L-&gt;next &#x3D; t;<br>        return L;<br>    }<br>    List P &#x3D; L;<br>    while (P-&gt;next !&#x3D; L)&#x2F;&#x2F;每次插入都要先遍历到最后一个结点<br>    {<br>        P &#x3D; P-&gt;next;<br>    }<br>    List t &#x3D; malloc(sizeof(struct node));<br>    t-&gt;data &#x3D; Len;<br>    t-&gt;next &#x3D; L;<br>    P-&gt;next &#x3D; t;<br>    return L;<br>}<br>List Search(List L, int N, int M)<br>{<br>    int i &#x3D; 1;&#x2F;&#x2F;记录报到几号<br>    int m &#x3D; 0;&#x2F;&#x2F;记录出列人数<br>    List P;<br>    P &#x3D; L-&gt;next;<br>    List R &#x3D; L;<br>    List L1 &#x3D; CreatList();&#x2F;&#x2F;创建新的循环单链表<br>    if (N &#x3D;&#x3D; 1)&#x2F;&#x2F;报数为1的特殊情况，直接遍历输出<br>    {<br>        while (P !&#x3D; L)<br>        {<br>            insert(L1, P-&gt;data);<br>            P &#x3D; P-&gt;next;</p><pre><code>    &#125;&#125;else&#123;    while (m != M)//循环结束条件，m==M,所有人出列    &#123;        if (P == L)//当走到头结点时，多走一步        &#123;            P = P-&gt;next;            R = R-&gt;next;        &#125;        if (i == N)        &#123;            m++;//出列人数加1            insert(L1, P-&gt;data);//将出列的人的序号传入新的循环单链表            R-&gt;next = P-&gt;next;//删除结点            P = R-&gt;next;            i = 1;//重新报数        &#125;        if (P == L)//当走到头结点时，多走一步        &#123;            P = P-&gt;next;            R = R-&gt;next;        &#125;        P = P-&gt;next;        R = R-&gt;next;        i++;    &#125;&#125;return L1;</code></pre><p>}<br>Printf(List L)<br>{<br>List P &#x3D; L-&gt;next;<br>while (P !&#x3D; L)<br>{<br>    printf(“%4d”, P-&gt;data);<br>    P &#x3D; P-&gt;next;<br>}<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1111</title>
      <link href="/blog/2023/10/15/1111-1/"/>
      <url>/blog/2023/10/15/1111-1/</url>
      
        <content type="html"><![CDATA[<p>11111</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1111</title>
      <link href="/blog/2023/10/15/1111/"/>
      <url>/blog/2023/10/15/1111/</url>
      
        <content type="html"><![CDATA[<p>•́‸ก<br>#include &lt;stdio.h&gt;<br>#include &lt;malloc.h&gt;<br>typedef struct node<br>{<br>    int data;<br>    struct node* next;<br>}snode, * ptr;<br>ptr  creat();<br>void output(ptr p);<br>ptr insert(ptr head, int x);<br>void destory(ptr q);<br>int main()<br>{<br>    ptr head;<br>    ptr headn;<br>    head &#x3D; creat();<br>    headn &#x3D; creat();<br>    int x;<br>    while (scanf(“%d”, &amp;x) &#x3D;&#x3D; 1)<br>    {<br>        if (x &gt; 0)<br>            head &#x3D; insert(head, x);<br>        else<br>            headn &#x3D; insert(headn, x);<br>    }<br>    output(head);<br>    printf(“\n”);<br>    output(headn);<br>    destory(head);<br>    destory(headn);<br>    return 0;<br>}<br>ptr  creat()<br>{<br>    ptr head &#x3D; malloc(sizeof(snode));<br>    head-&gt;next &#x3D; NULL;<br>    return head;<br>}<br>ptr insert(ptr head, int x)<br>{<br>    if (head-&gt;next &#x3D;&#x3D; NULL)<br>    {<br>        ptr t &#x3D; malloc(sizeof(snode));<br>        t-&gt;data &#x3D; x;<br>        t-&gt;next &#x3D; NULL;<br>        head-&gt;next &#x3D; t;<br>    }<br>    ptr rear &#x3D; head;<br>    ptr p &#x3D; head-&gt;next;<br>    while (p !&#x3D; NULL)<br>    {<br>        if (x &lt; p-&gt;data)<br>        {<br>            ptr t &#x3D; malloc(sizeof(snode));<br>            t-&gt;data &#x3D; x;<br>            t-&gt;next &#x3D; NULL;<br>            t-&gt;next &#x3D; rear-&gt;next;<br>            rear-&gt;next &#x3D; t;<br>            return head;<br>        }<br>        p &#x3D; p-&gt;next;<br>        rear &#x3D; rear-&gt;next;<br>    }<br>    if (x &gt; rear-&gt;data)<br>    {<br>        ptr t &#x3D; malloc(sizeof(snode));<br>        t-&gt;data &#x3D; x;<br>        t-&gt;next &#x3D; NULL;<br>        rear-&gt;next &#x3D; t;<br>    }<br>    return head;<br>}<br>void output(ptr p)<br>{<br>    ptr cur &#x3D; p-&gt;next;<br>    while (cur-&gt;next !&#x3D; NULL)<br>    {<br>        printf(“%d-&gt;”, cur-&gt;data);<br>        cur &#x3D; cur-&gt;next;<br>    }<br>    printf(“%d”, cur-&gt;data);<br>}<br>void destory(ptr q)<br>{<br>    ptr L &#x3D; q;<br>    ptr h &#x3D; q-&gt;next;<br>    while (h-&gt;next)<br>    {<br>        L-&gt;next &#x3D; h-&gt;next;<br>        free(h);<br>        h &#x3D; L-&gt;next;<br>    }<br>    free(L);<br>}</p><p>#include &lt;stdio.h&gt;<br>#define INF 0x3f3f3f3f<br>int dis[2505], vis[2505], head[2505], cnt;<br>int n, m, s, t;<br>void add(int a, int b, int c);<br>void swap(int x, int y);<br>void push(int w, int id);<br>void pop();<br>void dijstra(int s);<br>typedef struct {<br>    int v, w, nxt;<br>} Edge;<br>Edge edge[6205];<br>typedef struct {<br>    int val, id;<br>} HNode;<br>typedef struct {<br>    HNode h[6205];<br>    int size;<br>} Heap;<br>Heap h;<br>int main()<br>{<br>    int i, j;<br>    scanf(“%d%d%d%d”, &amp;n, &amp;m, &amp;s, &amp;t);<br>    for(i&#x3D;1; i&lt;&#x3D;m; ++i)<br>    {<br>        int a, b, c;<br>        scanf(“%d%d%d”, &amp;a, &amp;b, &amp;c);<br>        add(a, b, c);<br>        add(b, a, c);<br>    }<br>    dijstra(s);<br>    printf(“%d\n”, dis[t]);<br>    return 0;<br>}<br>void add(int a, int b, int c)<br>{<br>    edge[++cnt].v &#x3D; b;<br>    edge[cnt].w &#x3D; c;<br>    edge[cnt].nxt &#x3D; head[a];<br>    head[a] &#x3D; cnt;<br>    return;<br>}<br>void swap(int x, int y)<br>{<br>    HNode t &#x3D; h.h[x];<br>    h.h[x] &#x3D; h.h[y];<br>    h.h[y] &#x3D; t;<br>    return;<br>}<br>void push(int w, int id)<br>{<br>    ++h.size;<br>    h.h[h.size].val &#x3D; w;<br>    h.h[h.size].id &#x3D; id;<br>    int i;<br>    for(i&#x3D;h.size; (i&gt;&gt;1)&amp;&amp;(h.h[i&gt;&gt;1].val &gt; h.h[i].val); i&gt;&gt;&#x3D;1)<br>        swap(i&gt;&gt;1, i);<br>    return;<br>}<br>void pop()<br>{<br>    h.h[1] &#x3D; h.h[h.size];<br>    –h.size;<br>    int i, mn, flag;<br>    for(i&#x3D;1; (i&lt;&lt;1)&lt;&#x3D;h.size; )<br>    {<br>        flag &#x3D; 1;<br>        mn &#x3D; h.h[i].val &lt; h.h[i&lt;&lt;1].val ? i : i&lt;&lt;1;<br>        if((i&lt;&lt;1|1)&lt;&#x3D;h.size &amp;&amp; h.h[i&lt;&lt;1|1].val &lt; h.h[mn].val)<br>            mn &#x3D; i&lt;&lt;1|1;<br>        if(mn !&#x3D; i) swap(mn, i);<br>        else break;<br>        i &#x3D; mn;<br>    }<br>    return;<br>}<br>void dijstra(int s)<br>{<br>    int i, j;<br>    for(i&#x3D;1; i&lt;&#x3D;n; ++i)<br>        dis[i] &#x3D; INF;<br>    dis[s] &#x3D; 0;<br>    push(0, s);<br>    while(h.size)<br>    {<br>        int u &#x3D; h.h[1].id;<br>        if(u &#x3D;&#x3D; t) return;<br>        if(vis[u])<br>        {<br>            pop();<br>            continue;<br>        }<br>        vis[u] &#x3D; 1;<br>        pop();<br>        for(i&#x3D;head[u]; i; i&#x3D;edge[i].nxt)<br>        {<br>            int v &#x3D; edge[i].v, w &#x3D; edge[i].w;<br>            if(dis[u]+w &lt; dis[v])<br>            {<br>                dis[v] &#x3D; dis[u]+w;<br>                push(dis[v], v);<br>            }<br>        }<br>    }<br>    return;<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2023/10/14/hello-world/"/>
      <url>/blog/2023/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
